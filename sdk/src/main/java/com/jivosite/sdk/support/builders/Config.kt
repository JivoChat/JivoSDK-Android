package com.jivosite.sdk.support.buildersimport android.app.PendingIntentimport android.net.Uriimport androidx.annotation.ColorResimport androidx.annotation.DrawableResimport androidx.annotation.StringResimport com.jivosite.sdk.ui.chat.JivoChatFragment/** * Created on 07.06.2021. * * @author Alexander Tavtorkin (tavtorkin@jivosite.com) */class Config private constructor(    val welcomeMessage: Int?,    val openNotificationCallback: (() -> PendingIntent)?,    val onBackPressedCallback: (JivoChatFragment.() -> Unit)?,    val uriNotificationSound: Uri?,    val notificationSmallIcon: Int?,    val notificationColorIcon: Int?,    val offlineMessage: Int?,    val useRattingStringsRes: Boolean = false) {    class Builder {        @StringRes        private var welcomeMessage: Int? = null        private var openNotificationCallback: (() -> PendingIntent)? = null        private var onBackPressedCallback: (JivoChatFragment.() -> Unit)? = null        private var uriNotificationSound: Uri? = null        @StringRes        private var offlineMessage: Int? = null        @DrawableRes        private var notificationSmallIcon: Int? = null        @ColorRes        private var notificationColorIcon: Int? = null        private var useRattingStringsRes: Boolean = false        fun setWelcomeMessage(@StringRes welcomeMessageResId: Int) = apply { this.welcomeMessage = welcomeMessageResId }        fun setOpenNotification(callback: (() -> PendingIntent)) = apply { this.openNotificationCallback = callback }        fun setOnBackPressed(callback: JivoChatFragment.() -> Unit) = apply { this.onBackPressedCallback = callback }        fun setUriNotificationSound(uri: Uri) = apply { this.uriNotificationSound = uri }        fun setNotificationSmallIcon(@DrawableRes notificationSmallIcon: Int) =            apply { this.notificationSmallIcon = notificationSmallIcon }        fun setNotificationColorIcon(@ColorRes notificationColorIcon: Int) = apply {            this.notificationColorIcon = notificationColorIcon        }        fun setOfflineMessage(@StringRes offlineMessageResId: Int) = apply { this.offlineMessage = offlineMessageResId }        fun useRattingStringsRes() = apply { this.useRattingStringsRes = true }        fun build() = Config(            welcomeMessage,            openNotificationCallback,            onBackPressedCallback,            uriNotificationSound,            notificationSmallIcon,            notificationColorIcon,            offlineMessage,            useRattingStringsRes        )    }}