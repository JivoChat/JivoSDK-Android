package com.jivosite.sdk.support.usecaseimport com.jivosite.sdk.Jivoimport com.jivosite.sdk.logger.LogsRepositoryimport com.jivosite.sdk.model.SdkContextimport com.jivosite.sdk.model.repository.agent.AgentRepositoryimport com.jivosite.sdk.model.repository.chat.ChatStateRepositoryimport com.jivosite.sdk.model.repository.contacts.ContactFormRepositoryimport com.jivosite.sdk.model.repository.history.HistoryRepositoryimport com.jivosite.sdk.model.repository.pagination.PaginationRepositoryimport com.jivosite.sdk.model.repository.pending.PendingRepositoryimport com.jivosite.sdk.model.repository.profile.ProfileRepositoryimport com.jivosite.sdk.model.repository.rating.RatingRepositoryimport com.jivosite.sdk.model.repository.send.SendMessageRepositoryimport com.jivosite.sdk.model.repository.typing.TypingRepositoryimport com.jivosite.sdk.model.repository.upload.UploadRepositoryimport com.jivosite.sdk.model.storage.SharedStorageimport javax.inject.Inject/** * Created on 24.06.2021. * * @author Alexander Tavtorkin (tavtorkin@jivosite.com) */class ClearUseCase @Inject constructor(    private val sdkContext: SdkContext,    private val storage: SharedStorage,    private val agentRepository: AgentRepository,    private val chatStateRepository: ChatStateRepository,    private val historyRepository: HistoryRepository,    private val paginationRepository: PaginationRepository,    private val profileRepository: ProfileRepository,    private val sendMessageRepository: SendMessageRepository,    private val typingRepository: TypingRepository,    private val uploadRepository: UploadRepository,    private val pendingRepository: PendingRepository,    private val contactFormRepository: ContactFormRepository,    private val ratingRepository: RatingRepository,    private val logsRepository: LogsRepository) : UseCase {    override fun execute() {        storage.run {            path = ""            lastReadMsgId = 0            lastUnreadMsgId = 0            lastAckMsgId = 0            userToken = ""            pushToken = ""            host = ""            widgetId = ""        }        agentRepository.clear()        chatStateRepository.clear()        historyRepository.clear()        historyRepository.clear()        paginationRepository.clear()        profileRepository.clear()        sendMessageRepository.clear()        typingRepository.clear()        uploadRepository.clear()        pendingRepository.clear()        contactFormRepository.clear()        ratingRepository.clear()        logsRepository.clear()        Jivo.i("Clear data has completed")    }}