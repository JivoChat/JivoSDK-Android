package com.jivosite.sdk.support.usecaseimport androidx.lifecycle.LiveDataimport com.jivosite.sdk.api.SdkApiimport com.jivosite.sdk.model.SdkContextimport com.jivosite.sdk.model.pojo.config.Configimport com.jivosite.sdk.model.storage.SharedStorageimport com.jivosite.sdk.network.resource.NetworkResourceimport com.jivosite.sdk.network.resource.Resourceimport com.jivosite.sdk.support.async.Schedulersimport com.jivosite.sdk.support.ext.loadSilentlyResourceimport javax.inject.Inject/** * Created on 17.05.2021. * * @author Alexander Tavtorkin (av.tavtorkin@gmail.com) */class SdkConfigUseCase @Inject constructor(    private val sdkContext: SdkContext,    private val schedulers: Schedulers,    private val storage: SharedStorage,    private val sdkApi: SdkApi) : UseCase {    private var onSuccessCallback: (()-> Unit)? = null    private var onRestartCallback: (()-> Unit)? = null    override fun execute() {        val widgetId = storage.widgetId.ifBlank { sdkContext.widgetId }        if (widgetId.isNotBlank()) {            createRequest(widgetId).loadSilentlyResource {                result { onSuccessCallback?.invoke() }            }        }    }    fun onSuccess(onSuccessHandler: () -> Unit) : UseCase {        onSuccessCallback = onSuccessHandler        return this    }    fun onRestart(onRestartHandler: () -> Unit) : UseCase {        onRestartCallback = onRestartHandler        return this    }    fun restart() {        val widgetId = storage.widgetId.ifBlank { sdkContext.widgetId }        if (widgetId.isNotBlank()) {            createRequest(widgetId).loadSilentlyResource {                result { onRestartCallback?.invoke() }            }        }    }    private fun createRequest(widgetId: String): LiveData<Resource<Boolean>> {        return NetworkResource.Builder<Boolean, Config>(schedulers)            .createCall {                sdkApi.getConfig(widgetId)            }            .handleResponse {                storage.siteId = it.siteId                storage.chatserverHost = it.chatserverHost                storage.apiHost = it.apiHost                storage.filesHost = it.filesHost                it.apiHost.isNotBlank()            }            .build()            .asLiveData()    }}