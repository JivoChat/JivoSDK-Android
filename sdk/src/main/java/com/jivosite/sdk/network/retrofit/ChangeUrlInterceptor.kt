package com.jivosite.sdk.network.retrofitimport com.jivosite.sdk.model.storage.SharedStorageimport okhttp3.Interceptorimport okhttp3.Responseimport timber.log.Timber/** * Created on 4/20/21. * * @author Alexander Tavtorkin (av.tavtorkin@gmail.com) */class ChangeUrlInterceptor(private val storage: SharedStorage) : Interceptor {    companion object {        const val URL = "url"        const val API = "api"        const val NODE = "node"        const val TELEMETRY = "telemetry"        private const val BASE_HOST = "jivosite.com"    }    override fun intercept(chain: Interceptor.Chain): Response {        val originalRequest = chain.request()        val oldUrl = originalRequest.url        val newUrl = oldUrl.newBuilder().apply {            originalRequest.headers(URL).forEach {                when (it) {                    API -> host("api.${storage.host.ifBlank { BASE_HOST }}")                    NODE -> {                        host("node.${storage.host.ifBlank { BASE_HOST }}")                        val port = storage.port                        if (port.isNotBlank()) {                            port(port.toInt())                        }                    }                    TELEMETRY -> host("telemetry.${storage.host.ifBlank { BASE_HOST }}")                }            }        }.build()        val newRequestBuilder = originalRequest.newBuilder()        newRequestBuilder.removeHeader(URL)        return chain.proceed(newRequestBuilder.url(newUrl).build())    }}