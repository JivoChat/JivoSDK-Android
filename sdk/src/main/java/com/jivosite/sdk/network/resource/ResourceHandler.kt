package com.jivosite.sdk.network.resourceimport com.jivosite.sdk.network.retrofit.error.JivoApiException/** * Created on 18.11.2020. * * @author Alexander Tavtorkin (av.tavtorkin@gmail.com) */class ResourceHandler<T> private constructor(val resource: Resource<T>?) {    companion object {        fun <T> of(resource: Resource<T>?) = ResourceHandler(resource)    }    private var progressConsumer: ((Boolean) -> Unit)? = null    private var progressUpdateConsumer: ((Long?) -> Unit)? = null    private var errorConsumer: ((String) -> Unit)? = null    private var errorListConsumer: ((Map<String, String>) -> Unit)? = null    private var errorThrowableConsumer: ((Throwable) -> Unit)? = null    private var resultConsumer: ((T) -> Unit)? = null    fun progress(consumer: (Boolean) -> Unit): ResourceHandler<T> {        progressConsumer = consumer        return this    }    fun progressUpdate(consumer: (Long?) -> Unit): ResourceHandler<T> {        progressUpdateConsumer = consumer        return this    }    fun error(consumer: (String) -> Unit): ResourceHandler<T> {        errorConsumer = consumer        return this    }    fun errorList(consumer: (Map<String, String>) -> Unit): ResourceHandler<T> {        errorListConsumer = consumer        return this    }    fun errorThrowable(consumer: (Throwable) -> Unit): ResourceHandler<T> {        errorThrowableConsumer = consumer        return this    }    fun result(consumer: (T) -> Unit): ResourceHandler<T> {        resultConsumer = consumer        return this    }    fun handle() {        when (resource?.status) {            Resource.STATE_LOADING -> {                progressConsumer?.invoke(true)                progressUpdateConsumer?.invoke(resource.bytesWritten ?: 0L)                resource.data?.let { data -> resultConsumer?.invoke(data) }            }            Resource.STATE_ERROR -> {                progressConsumer?.invoke(false)                progressUpdateConsumer?.invoke(null)                resource.throwable?.let { error ->                    error.localizedMessage?.let { message -> errorConsumer?.invoke(message) }                    if (error is JivoApiException) {                        errorListConsumer?.invoke(error.errors) ?: errorThrowableConsumer?.invoke(error)                    } else {                        errorThrowableConsumer?.invoke(error)                    }                }            }            Resource.STATE_SUCCESS -> {                progressConsumer?.invoke(false)                progressUpdateConsumer?.invoke(null)                resource.data?.let { data -> resultConsumer?.invoke(data) }            }        }    }}