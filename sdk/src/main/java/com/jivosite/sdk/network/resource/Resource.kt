package com.jivosite.sdk.network.resource/** * Created on 18.11.2020. * * @author Alexander Tavtorkin (av.tavtorkin@gmail.com) */class Resource<T>(        val status: Int = STATE_LOADING,        val bytesWritten: Long? = null,        val data: T? = null,        val error: String? = null,        val throwable: Throwable? = null,) {    companion object {        const val STATE_LOADING = 0        const val STATE_SUCCESS = 1        const val STATE_ERROR = 2        fun <T> loading(): Resource<T> = Resource()        fun <T> loading(data: T): Resource<T> = Resource(data = data)        fun <T> progressUpdate(bytesWritten: Long): Resource<T> = Resource(bytesWritten = bytesWritten)        fun <T> success(data: T): Resource<T> = Resource(STATE_SUCCESS, data = data)        fun <T> error(error: String?, throwable: Throwable?): Resource<T> = Resource(STATE_ERROR, error = error, throwable = throwable)        fun <T> error(data: T, error: String): Resource<T> = Resource(STATE_ERROR, data = data, error = error)        fun <T> error(data: T, error: String, throwable: Throwable): Resource<T> = Resource(status = STATE_ERROR, data = data, error = error, throwable = throwable)    }}