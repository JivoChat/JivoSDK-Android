package com.jivosite.sdk.pushimport androidx.lifecycle.LiveDataimport com.google.firebase.messaging.RemoteMessageimport com.jivosite.sdk.Jivoimport com.jivosite.sdk.api.PushApiimport com.jivosite.sdk.model.pojo.push.Notificationimport com.jivosite.sdk.model.pojo.push.PushDataimport com.jivosite.sdk.model.pojo.push.Uimport com.jivosite.sdk.model.pojo.response.Responseimport com.jivosite.sdk.model.repository.history.HistoryRepositoryimport com.jivosite.sdk.model.repository.profile.ProfileRepositoryimport com.jivosite.sdk.network.resource.NetworkResourceimport com.jivosite.sdk.network.resource.Resourceimport com.jivosite.sdk.push.handler.PushMessageHandlerimport com.jivosite.sdk.support.async.Schedulersimport com.jivosite.sdk.support.ext.loadSilentlyimport com.squareup.moshi.Moshiimport org.json.JSONObjectimport javax.inject.Inject/** * Created on 28.05.2021. * * @author Alexander Tavtorkin (tavtorkin@jivosite.com) */class RemoteMessageHandler @Inject constructor(    private var parser: Moshi,    private var handler: PushMessageHandler,    private val schedulers: Schedulers,    private val pushApi: PushApi,    private val profileRepository: ProfileRepository,    private val historyRepository: HistoryRepository) {    fun handleRemoteMessage(message: RemoteMessage): Boolean {        Jivo.i("Received push message")        val data = try {            extractData(message)        } catch (e: Exception) {            Jivo.e("Push message parsing problem")            return false        }        val (siteId, clientId) = data.u.user.split(":")        val pushId = data.u.pushId        if (profileRepository.isMe(clientId)) {            historyRepository.setHasUnreadMessages(true)            schedulers.ui.execute {                createRequest(siteId, clientId, pushId).loadSilently()            }            try {                handler.handle(data)            } catch (e: Exception) {                Jivo.e(e, "Push message handling problem")            }        } else {            Jivo.w("Push for another user, clientId = $clientId, pushId = $pushId")        }        return true    }    private fun extractData(message: RemoteMessage): PushData {        // Extract "u" field from remote message        val u = message.data["u"]?.let {            if (JSONObject(it).optBoolean("jivosdk", false)) {                parser.adapter(U::class.java).fromJson(it)            } else {                throw IllegalArgumentException("Field jivosdk has missing")            }        }        // Extract "notification" field from remote message        val notification = message.data["notification"]?.let {            parser.adapter(Notification::class.java).fromJson(it)        }        return PushData(            requireNotNull(u) { """There is no "u" field in push message""" },            requireNotNull(notification) { """There is no "notification" field in push message""" }        )    }    private fun createRequest(siteId: String, clientId: String, pushId: String): LiveData<Resource<Boolean>> {        return NetworkResource.Builder<Boolean, Response>(schedulers)            .createCall {                pushApi.postPushDelivery(                    siteId,                    clientId.split(".")[0],                    pushId                )            }            .handleResponse { it.isOk }            .build()            .asLiveData()    }}